cumCH4 = rCH4_prod - rCH4_ox,
cumCO2 = rCH4_prod * conv_CH4_CO2 + rCH4_ox
)
return(list(derivatives, c(rCH4_prod = rCH4_prod, rCH4_ox = rCH4_ox, temp_air = temp_air, temp_slurry = temp_slurry,
vol_air = vol_air, flow_air = flow_air)))
}
t <- 0:96
out <- deSolve::lsoda(y = y0, times = t, func = change, parms = pars)
out <- data.frame(out)
out$CH4_ppm <- out$CH4/out$vol_air/1000/16 * 0.08257 * out$temp_air * 1000000
plot(out$time, out$CH4_ppm)
lines(out$time, (out$temp_air-273)*100)
library(ReacTran)
install.packages('ReacTran')
library(ReacTran)
library(ReacTran)
install.packages('ReacTran')
pars <- list(
slurry_mass0 = 3000, # kg
cVSd0 = 0.04, # kg/kg slurry
area_crust = 3.14, # m2
flow_air = 0.7, # m3/h
vol_air = 3.5, # m3
temp_slurry = 288,
temp_dev = 10,
R = 8.314, # J/(K * mol)
lnA = c(CH4_prod = 31.3, CH4_ox = 32.8),
E = c(CH4_prod = 81000, CH4_ox = 86000), # J/mol
k = 8.2, # umol CH4/ (g fresh weight * h)
km = 18500, # ppm # kg/kg
conv_CH4_VS = 6.67,
conv_CH4_CO2 = 0.53
)
r_prod <- reaction("CH4_prod", expression = expression(exp(lnA['CH4_prod'] - E['CH4_prod'] / (R * temp_slurry)) * VSd), units = "g/h")
install.packages("ReacTran")
pars <- list(
slurry_mass0 = 3000, # kg
cVSd0 = 0.04, # kg/kg slurry
area_crust = 3.14, # m2
flow_air = 0.7, # m3/h
vol_air = 3.5, # m3
temp_slurry = 288,
temp_dev = 10,
R = 8.314, # J/(K * mol)
lnA = c(CH4_prod = 31.3, CH4_ox = 32.8),
E = c(CH4_prod = 81000, CH4_ox = 86000), # J/mol
k = 8.2, # umol CH4/ (g fresh weight * h)
km = 18500, # ppm # kg/kg
conv_CH4_VS = 6.67,
conv_CH4_CO2 = 0.53
)
r_prod <- reaction("CH4_prod", expression = expression(exp(lnA['CH4_prod'] - E['CH4_prod'] / (R * temp_slurry)) * VSd), units = "g/h")
library(ReacTran)
pars <- list(
slurry_mass0 = 3000, # kg
cVSd0 = 0.04, # kg/kg slurry
area_crust = 3.14, # m2
flow_air = 0.7, # m3/h
vol_air = 3.5, # m3
temp_slurry = 288,
temp_dev = 10,
R = 8.314, # J/(K * mol)
lnA = c(CH4_prod = 31.3, CH4_ox = 32.8),
E = c(CH4_prod = 81000, CH4_ox = 86000), # J/mol
k = 8.2, # umol CH4/ (g fresh weight * h)
km = 18500, # ppm # kg/kg
conv_CH4_VS = 6.67,
conv_CH4_CO2 = 0.53
)
r_prod <- reaction("CH4_prod", expression = expression(exp(lnA['CH4_prod'] - E['CH4_prod'] / (R * temp_slurry)) * VSd), units = "g/h")
library(rootSolve)
install.packages('rootSolve')
install.packages("rootSolve")
library(rootSolve)
library(ReacTran)
Grid <- setup.grid.1D(N = 1000, L = 10)
r <- setup.prop.1D(grid = Grid, func = function(r) r)
r2 <- setup.prop.1D(grid = Grid, func = function(r) r^2)
pde1D <- function(t, C, parms, A = 1) {
tran <- tran.1D(C = C, A = A, D = D, C.down = Cext,
dx = Grid)$dC
list(tran - Q)
}
Cartesian <- steady.1D(y = runif(Grid$N),
func = pde1D, parms = NULL, nspec = 1, A = 1)
D <- 1
Q <- 1
Cext <- 20
Cartesian <- steady.1D(y = runif(Grid$N),
func = pde1D, parms = NULL, nspec = 1, A = 1)
View(Cartesian)
plot(Cartesian$y)
times <- seq(0, 100, by = 1)
system.time(
out <- ode.1D(y = rep(1, Grid$N), times = times, func = pde1D,
parms = NULL, nspec = 1, A = r2)
)
?ode.1D
?tran.1D
parms$slurry_height <- 60
parms <- data.frame()
parms$slurry_height <- 60
parms$slurry_height <- 60
parms <- list(slurry_height = 60)
parms$slurry_height
parms <- list(slurry_height = 60)
pars <- list(slurry_height = 60)
Grid <- setup.grid.1D(N = 100, L = pars$slurry_height)
C0 <- list(VSd = 100)
library(ReacTran)
library(rootSolve)
library(deSolve)
pars <- list(slurry_height = 60)
Grid <- setup.grid.1D(N = 100, L = pars$slurry_height)
C0 <- list(VSd = 100)
pde1D <- function(t, C, parms = pars){
tran <- tran.1D(C = C, A = A, D = D, C.down = Cext,
dx = Grid)$dC
VSd <- y['VSd']
VSd = -k * VSd
list(tran - VSd)
}
times <- seq(0, 100, by = 1)
system.time(
out <- ode.1D(y = rep(C0, Grid$N), times = times, func = pde1D,
parms = NULL, nspec = 1, A = r2)
)
Grid$N
C0
C0$VSd
library(ReacTran)
library(rootSolve)
library(deSolve)
pars <- list(slurry_height = 60)
Grid <- setup.grid.1D(N = 100, L = pars$slurry_height)
C0 <- list(VSd = 100)
pde1D <- function(t, C, parms = parms){
tran <- tran.1D(C = C, A = A, D = D, C.down = Cext,
dx = Grid)$dC
VSd <- y['VSd']
VSd = -k * VSd
list(tran - VSd)
}
times <- seq(0, 100, by = 1)
out <- ode.1D(y = rep(C0$VSd, Grid$N), times = times, func = pde1D,
parms = pars, nspec = 1, A = 0.1)
r <- setup.prop.1D(grid = Grid, func = function(r) r)
C0 <- list(VSd = 100)
pde1D <- function(t, C, parms = parms){
tran <- tran.1D(C = C, A = A, D = D, C.down = Cext,
dx = Grid)$dC
VSd <- y['VSd']
VSd = -k * VSd
list(tran - VSd)
}
times <- seq(0, 100, by = 1)
out <- ode.1D(y = rep(C0$VSd, Grid$N), times = times, func = pde1D,
parms = pars, nspec = 1, A = r)
out <- ode.1D(y = rep(C0$VSd, Grid$N), times = times, func = pde1D,
parms = pars, nspec = 1, A = 1)
out <- ode.1D(y = rep(C0$VSd, Grid$N), times = times, func = pde1D,
parms = pars, nspec = 1, A = r)
out <- ode(y = rep(C0$VSd, Grid$N), times = times, func = pde1D, parms = pars)
tran <- tran.1D(C = C, A = 1, D = D, C.down = Cext,
dx = Grid)$dC
VSd <- y['VSd']
VSd = -k * VSd
library(ReacTran)
library(rootSolve)
library(deSolve)
# Load the required libraries
library(ReacTran)
library(rootSolve)
library(deSolve)
# Define the problem parameters
pars <- list(slurry_height = 60)
# Set up the grid
Grid <- setup.grid.1D(N = 100, L = pars$slurry_height)
A <- setup.prop.1D(grid = Grid, func = function(r) r)
# Define the initial condition
C0 <- list(VSd = 100)
# Define the PDE system
pde1D <- function(t, C, parms = pars, grid = Grid, A = A) {
tran <- tran.1D(C = C, A = A, dx = grid)$dC
VSd <- C['VSd']
VSd <- -k * VSd
list(tran - VSd)
}
# Define the time points for integration
times <- seq(0, 100, by = 1)
# Solve the PDE system
out <- ode(y = rep(C0$VSd, Grid$N), times = times, func = pde1D, parms = pars)
tran.1D <- function (C, C.up = C[1], C.down = C[length(C)], flux.up = NULL,
flux.down = NULL, a.bl.up = NULL, a.bl.down = NULL, D = 0,
v = 0, AFDW = 1, VF = 1, A = 1, dx, ...)
install.packages('marelac')
install.packages('marelac')
library(marelac)
diffHCO3 <- diffcoeff(S = 35, t = 20)$HCO3 * 3600 * 24 * 1e4
library(ReacTran)
library(marelac)
parms <- c(Dbio = 5/365,
v_adv = 0.005,
rmin = 0.01,
depoPOC = 200,
bwDIC = 2000)
library(ReacTran)
library(marelac)
phi <- 0.7 * 0.2*exp(-1*x)
N = 200 # steps, equally sized
length = 20 # cm
# porosity for liquid
porFun.L <- function(x, por.SWI, por.deep, porcoef)
return(por.deep + (por.WSI - por.deep) * exp(-x * porcoef))
# porosity for solid
porFun.S <- function(x, por.SWI, por.deep, porcoef)
return(1-porFun.L(x, por.SWI, por.deep, porcoef))
porLiquid <- setup.prop.1D(func = porFun.L, grid = Grid,
por.SWI = 0.9, por.deep = 0.7, porcoef = 1)
# porosity for liquid
porFun.L <- function(x, por.SWI, por.deep, porcoef)
return(por.deep + (por.SWI - por.deep) * exp(-x * porcoef))
# porosity for solid
porFun.S <- function(x, por.SWI, por.deep, porcoef)
return(1-porFun.L(x, por.SWI, por.deep, porcoef))
porLiquid <- setup.prop.1D(func = porFun.L, grid = Grid,
por.SWI = 0.9, por.deep = 0.7, porcoef = 1)
porSolid <- setup.prop.1D(func = porFun.S, grid = Grid,
por.SWI = 0.9, por.deep = 0.7, porcoef = 1)
diffHCO3 <- diffcoeff(S = 35, t = 20)$HCO3 * 3600 * 24 * 1e4
porInt <- porLiquid$int
diffDIC <- diffHCO3 / (1 - log(porInt^2))
parms <- c(Dbio = 5/365,
v_adv = 0.005,
rmin = 0.01,
depoPOC = 200,
bwDIC = 2000)
names <- c("POC", "DIC")
nspec = length(names)
POC.ini <- rep(0, length = N)
DIC.ini <- rep(0, length = N)
state <- c(POC.ini, DIC.ini)
Diamodel <- function(t, state, pars){
with(as.list(pars),{
POC <- state[1:N]
DIC <- state[(N+1):(2*N)]
tran.POC <- tran.1D(C = POC, flux.up = depoPOC, dx = Grid,
VF = porSolid, D = Dbio, v = v_adv)
tran.DIC <- tran.1D(C = DIC, C.up = bwDIC, dx = Grid,
VF = porLiquid, D = diffDIC, v = v_adv)
Mineralisation <- rMin * POC
dPOC.dt <- tran.POC$dC - Mineralisation
poro <- porLiquid$mid
dDIC.dt <- tran.DIC$dC + Mineralisation * (1- poro)/poro
})
return(list(c(dPOC.dt, dDIC.dt)))
}
std <- steady.1D(y = state, func = Diamodel, parms = parms,
nspec = nspec, dimens = N, names = names,
positive = TRUE)
install.packages("marelac")
install.packages("marelac")
parms <- c(Dbio = 5/365,
v_adv = 0.005,
rMin = 0.01,
depoPOC = 200,
bwDIC = 2000)
names <- c("POC", "DIC")
nspec = length(names)
POC.ini <- rep(0, length = N)
DIC.ini <- rep(0, length = N)
state <- c(POC.ini, DIC.ini)
Diamodel <- function(t, state, pars){
with(as.list(pars),{
POC <- state[1:N]
DIC <- state[(N+1):(2*N)]
tran.POC <- tran.1D(C = POC, flux.up = depoPOC, dx = Grid,
VF = porSolid, D = Dbio, v = v_adv)
tran.DIC <- tran.1D(C = DIC, C.up = bwDIC, dx = Grid,
VF = porLiquid, D = diffDIC, v = v_adv)
Mineralisation <- rMin * POC
dPOC.dt <- tran.POC$dC - Mineralisation
poro <- porLiquid$mid
dDIC.dt <- tran.DIC$dC + Mineralisation * (1- poro)/poro
})
return(list(c(dPOC.dt, dDIC.dt)))
}
std <- steady.1D(y = state, func = Diamodel, parms = parms,
nspec = nspec, dimens = N, names = names,
positive = TRUE)
install.packages("marelac")
Grid <- setup.grid.1D(L = length, N = N)
library(ReacTran)
library(marelac)
N = 200 # steps, equally sized
length = 20 # cm
Grid <- setup.grid.1D(L = length, N = N)
# porosity for liquid
porFun.L <- function(x, por.SWI, por.deep, porcoef)
return(por.deep + (por.SWI - por.deep) * exp(-x * porcoef))
# porosity for solid
porFun.S <- function(x, por.SWI, por.deep, porcoef)
return(1-porFun.L(x, por.SWI, por.deep, porcoef))
porLiquid <- setup.prop.1D(func = porFun.L, grid = Grid,
por.SWI = 0.9, por.deep = 0.7, porcoef = 1)
porSolid <- setup.prop.1D(func = porFun.S, grid = Grid,
por.SWI = 0.9, por.deep = 0.7, porcoef = 1)
diffHCO3 <- diffcoeff(S = 35, t = 20)$HCO3 * 3600 * 24 * 1e4
porInt <- porLiquid$int
diffDIC <- diffHCO3 / (1 - log(porInt^2))
parms <- c(Dbio = 5/365,
v_adv = 0.005,
rMin = 0.01,
depoPOC = 200,
bwDIC = 2000)
names <- c("POC", "DIC")
nspec = length(names)
POC.ini <- rep(0, length = N)
DIC.ini <- rep(0, length = N)
state <- c(POC.ini, DIC.ini)
Diamodel <- function(t, state, pars){
with(as.list(pars),{
POC <- state[1:N]
DIC <- state[(N+1):(2*N)]
tran.POC <- tran.1D(C = POC, flux.up = depoPOC, dx = Grid,
VF = porSolid, D = Dbio, v = v_adv)
tran.DIC <- tran.1D(C = DIC, C.up = bwDIC, dx = Grid,
VF = porLiquid, D = diffDIC, v = v_adv)
Mineralisation <- rMin * POC
dPOC.dt <- tran.POC$dC - Mineralisation
poro <- porLiquid$mid
dDIC.dt <- tran.DIC$dC + Mineralisation * (1- poro)/poro
})
return(list(c(dPOC.dt, dDIC.dt)))
}
std <- steady.1D(y = state, func = Diamodel, parms = parms,
nspec = nspec, dimens = N, names = names,
positive = TRUE)
install.packages("marelac")
install.packages("marelac")
POC <- state[1:N]
DIC <- state[(N+1):(2*N)]
tran.POC <- tran.1D(C = POC, flux.up = depoPOC, dx = Grid,
VF = porSolid, D = Dbio, v = v_adv)
install.packages("marelac")
rm(list = ls())
library(ReacTran)
library(marelac)
N = 200 # steps, equally sized
length = 20 # cm
Grid <- setup.grid.1D(L = length, N = N)
# porosity for liquid
porFun.L <- function(x, por.SWI, por.deep, porcoef)
return(por.deep + (por.SWI - por.deep) * exp(-x * porcoef))
# porosity for solid
porFun.S <- function(x, por.SWI, por.deep, porcoef)
return(1-porFun.L(x, por.SWI, por.deep, porcoef))
porLiquid <- setup.prop.1D(func = porFun.L, grid = Grid,
por.SWI = 0.9, por.deep = 0.7, porcoef = 1)
porSolid <- setup.prop.1D(func = porFun.S, grid = Grid,
por.SWI = 0.9, por.deep = 0.7, porcoef = 1)
diffHCO3 <- diffcoeff(S = 35, t = 20)$HCO3 * 3600 * 24 * 1e4
porInt <- porLiquid$int
diffDIC <- diffHCO3 / (1 - log(porInt^2))
parms <- c(Dbio = 5/365,
v_adv = 0.005,
rMin = 0.01,
depoPOC = 200,
bwDIC = 2000)
names <- c("POC", "DIC")
nspec = length(names)
POC.ini <- rep(0, length = N)
DIC.ini <- rep(0, length = N)
state <- c(POC.ini, DIC.ini)
Diamodel <- function(t, state, pars){
with(as.list(pars),{
POC <- state[1:N]
DIC <- state[(N+1):(2*N)]
tran.POC <- tran.1D(C = POC, flux.up = depoPOC, dx = Grid,
VF = porSolid, D = Dbio, v = v_adv)
tran.DIC <- tran.1D(C = DIC, C.up = bwDIC, dx = Grid,
VF = porLiquid, D = diffDIC, v = v_adv)
Mineralisation <- rMin * POC
dPOC.dt <- tran.POC$dC - Mineralisation
poro <- porLiquid$mid
dDIC.dt <- tran.DIC$dC + Mineralisation * (1- poro)/poro
})
return(list(c(dPOC.dt, dDIC.dt)))
}
std <- steady.1D(y = state, func = Diamodel, parms = parms,
nspec = nspec, dimens = N, names = names,
positive = TRUE)
rm(list = ls())
library(ReacTran)
library(marelac)
N = 200 # steps, equally sized
length = 20 # cm
Grid <- setup.grid.1D(L = length, N = N)
# porosity for liquid
porFun.L <- function(x, por.SWI, por.deep, porcoef)
return(por.deep + (por.SWI - por.deep) * exp(-x * porcoef))
# porosity for solid
porFun.S <- function(x, por.SWI, por.deep, porcoef)
return(1-porFun.L(x, por.SWI, por.deep, porcoef))
porLiquid <- setup.prop.1D(func = porFun.L, grid = Grid,
por.SWI = 0.9, por.deep = 0.7, porcoef = 1)
porSolid <- setup.prop.1D(func = porFun.S, grid = Grid,
por.SWI = 0.9, por.deep = 0.7, porcoef = 1)
diffHCO3 <- diffcoeff(S = 35, t = 20)$HCO3 * 3600 * 24 * 1e4
porInt <- porLiquid$int
diffDIC <- diffHCO3 / (1 - log(porInt^2))
parms <- c(Dbio = 5/365,
v_adv = 0.005,
rMin = 0.01,
depoPOC = 200,
bwDIC = 2000)
names <- c("POC", "DIC")
nspec = length(names)
POC.ini <- rep(0, length = N)
DIC.ini <- rep(0, length = N)
state <- c(POC.ini, DIC.ini)
debug(Diamodel)
debug('Diamodel')
Diamodel <- function(t, state, pars){
with(as.list(pars),{
POC <- state[1:N]
DIC <- state[(N+1):(2*N)]
tran.POC <- tran.1D(C = POC, flux.up = depoPOC, dx = Grid,
VF = porSolid, D = Dbio, v = v_adv)
tran.DIC <- tran.1D(C = DIC, C.up = bwDIC, dx = Grid,
VF = porLiquid, D = diffDIC, v = v_adv)
Mineralisation <- rMin * POC
dPOC.dt <- tran.POC$dC - Mineralisation
poro <- porLiquid$mid
dDIC.dt <- tran.DIC$dC + Mineralisation * (1- poro)/poro
})
return(list(c(dPOC.dt, dDIC.dt)))
}
debug('Diamodel')
std <- steady.1D(y = state, func = Diamodel, parms = parms,
nspec = nspec, dimens = N, names = names,
positive = TRUE)
Diamodel <- function(t, state, pars){
with(as.list(pars),{
POC <- state[1:N]
DIC <- state[(N+1):(2*N)]
tran.POC <- tran.1D(C = POC, flux.up = depoPOC, dx = Grid,
VF = porSolid, D = Dbio, v = v_adv)
tran.DIC <- tran.1D(C = DIC, C.up = bwDIC, dx = Grid,
VF = porLiquid, D = diffDIC, v = v_adv)
Mineralisation <- rMin * POC
dPOC.dt <- tran.POC$dC - Mineralisation
poro <- porLiquid$mid
dDIC.dt <- tran.DIC$dC + Mineralisation * (1- poro)/poro
return(list(c(dPOC.dt, dDIC.dt)))
})
}
std <- steady.1D(y = state, func = Diamodel, parms = parms,
nspec = nspec, dimens = N, names = names,
positive = TRUE)
out <- ode.1D(y = std$y, func = Diamodel, parms = parms, times = times,
nspec = nspec, dimens = N, names = names)
times <- seq(from = 0, to = 2*365, length.out = 50)
parms["depoPOC"] <- 1000
out <- ode.1D(y = std$y, func = Diamodel, parms = parms, times = times,
nspec = nspec, dimens = N, names = names)
image(out, legend = TRUE, grid = Grid$x.mid, ylim = (lenght, 0),
image(out, legend = TRUE, grid = Grid$x.mid, ylim = c(length, 0),
las = 1)
out <- ode.1D(y = std$y, func = Diamodel, parms = parms, times = times,
nspec = nspec, dimens = N, names = names)
image(out, legend = TRUE, grid = Grid$x.mid, ylim = c(length, 0),
las = 1)
image(out, legend = TRUE, grid = Grid$x.mid, ylim = c(length, 0),
las = 1)
image(out, legend = TRUE, grid = Grid$x.mid, ylim = c(2, 0),
las = 1)
View(out)
out <- as.data.frame(ode.1D(y = std$y, func = Diamodel, parms = parms, times = times,
nspec = nspec, dimens = N, names = names))
std <- steady.1D(y = state, func = Diamodel, parms = parms,
nspec = nspec, dimens = N, names = names,
positive = TRUE)
View(std)
View(std)
std$y
length
out <- as.data.frame(ode.1D(y = std$y, func = Diamodel, parms = parms, times = times,
nspec = nspec, dimens = N, names = names))
image(out, legend = TRUE, grid = Grid$x.mid, ylim = c(length, 0),
las = 1, ylab = "depth (cm)", xlab = "time (d)")
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
# Get packages
abm_packages()
# Get C++ function
sourceCpp('../src/CTM_cpp.cpp')
abm(365,1)
View(ferm)
ferm$ferm['CO2'] * 44.01
sum(rut[i_meth])/ferm$COD_conv_meth_CO2
sum(rutsr)/ferm$COD_conv_sr_CO2
COD_conv[['CO2_sr']]
library(biogas)
> molMass('CO2') * 16 / (calcCOD(fpd) * molMass(fpd))
library(biogas)
fpd <- 'C16 H27 O8.7 N'
(calcCOD(fpd) * molMass(fpd))
(calcCOD(fpd))
