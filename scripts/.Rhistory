browser()
vol_HS <- parms$vol_HS
emis <- parms$emis * parms$vol_manure # kg CH4/hour
vent <- vent_fun(t) # m3/hour
derivatives <- c(
y = - vent * y + emis/vol_HS
)
emission_out <- y * vent # kg/hour
return(list(derivatives, emission_rate = emission_out))
}
out <- deSolve::lsoda(y = y0, times = times, func = rates, parms = pars, vent_fun = vent_fun)
- vent * y
y
emis/vol_HS
out <- data.frame(out)
vol_HS <- 2481 # m3
emis <- 0.067/24 # kgCH4 pr m3 pr hour
vol_manure <- 1212 # m3
vent_rate <- 104 # m3/hour
times <- sort(dat$hours)
times <- times[!duplicated(times)]
# start conc in ppm
dat_int <- dat[, .(CH4_conc_ppm = approx(hours, CH4_conc_ppm, xout = hours, rule = 2, method = 'linear')$y,
wind_speed_ms = approx(hours, wind_speed_ms, xout = hours, rule = 2, method = 'linear')$y, time = hours)]
dat_int <- dat_int[!duplicated(dat_int$time)]
makeTimeFunc <- function(dat, x = 1, y = 2, approx_method = 'linear') {
if (is.data.frame(dat)) {
x <- dat[, x]
y <- dat[, y]
func <- approxfun(x, y, method = approx_method, rule = 2)
} else if (is.numeric(dat)) {
func <- function(x) return(dat)
} else {
stop('Input to makeTimeFunc must be numeric or data frame.')
}
return(func)
}
dat_vent <- as.data.frame(dat_int[, .(time = time, vent_norm = ..vent_rate/mean(wind_speed_ms, na.rm = T) * wind_speed_ms)])
vent_fun <- makeTimeFunc(dat_vent)
T = 273.15 + 20
R = 0.082057
y0 <- (dat_int[1, CH4_conc_ppm]/10^6 * 1000)/(R * T) * 16.04/1000 # kg/m3
pars <- list(vol_HS = vol_HS, vol_manure = vol_manure, emis = emis)
rates <- function(t, y, parms, vent_fun){
browser()
vol_HS <- parms$vol_HS
emis <- parms$emis * parms$vol_manure # kg CH4/hour
vent <- vent_fun(t) # m3/hour
derivatives <- c(
y = - vent/vol_HS * y + emis/vol_HS
)
emission_out <- y * vent # kg/hour
return(list(derivatives, emission_rate = emission_out))
}
out <- deSolve::lsoda(y = y0, times = times, func = rates, parms = pars, vent_fun = vent_fun)
- vent/vol_HS * y
out <- data.frame(out)
vol_HS <- 2481 # m3
vol_manure <- 1212 # m3
emis <- 0.067/24 * vol_manure # kg CH4 pr hour
vent_rate <- 104 # m3/hour
times <- sort(dat$hours)
times <- times[!duplicated(times)]
# start conc in ppm
dat_int <- dat[, .(CH4_conc_ppm = approx(hours, CH4_conc_ppm, xout = hours, rule = 2, method = 'linear')$y,
wind_speed_ms = approx(hours, wind_speed_ms, xout = hours, rule = 2, method = 'linear')$y, time = hours)]
dat_int <- dat_int[!duplicated(dat_int$time)]
makeTimeFunc <- function(dat, x = 1, y = 2, approx_method = 'linear') {
if (is.data.frame(dat)) {
x <- dat[, x]
y <- dat[, y]
func <- approxfun(x, y, method = approx_method, rule = 2)
} else if (is.numeric(dat)) {
func <- function(x) return(dat)
} else {
stop('Input to makeTimeFunc must be numeric or data frame.')
}
return(func)
}
dat_vent <- as.data.frame(dat_int[, .(time = time, vent_norm = ..vent_rate/mean(wind_speed_ms, na.rm = T) * wind_speed_ms)])
vent_fun <- makeTimeFunc(dat_vent)
T = 273.15 + 20
R = 0.082057
y0 <- (dat_int[1, CH4_conc_ppm]/10^6 * 1000)/(R * T) * 16.04/1000# kg CH4/m3 in tank headspace total
pars <- list(vol_HS = vol_HS, vol_manure = vol_manure, emis = emis)
rates <- function(t, y, parms, vent_fun){
#browser()
vol_HS <- parms$vol_HS
emis <- parms$emis # kg CH4/hour
vent <- vent_fun(t) # m3/hour
derivatives <- c(
y = - (vent * y)/vol_HS + emis/vol_HS #
)
emission_out <- y * vent # kg/hour
return(list(derivatives, emission_rate = emission_out))
}
out <- deSolve::lsoda(y = y0, times = times, func = rates, parms = pars, vent_fun = vent_fun)
out <- data.frame(out)
plot(plot_dat$time, plot_dat$conc_ppm)
plot_dat <- out
plot(out$time, out$X1)
plot(out$time, out$emission_rate)
names(out) <- c('hours','CH4_conc_kg_m3','CH4_emis_kg_hour')
plot(out$time, out$CH4_conc_kg_m3)
plot(out$time, out$CH4_emis_kg_hour/vol_manure * 24, ylab = 'kg CH4/m3/day')
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(data.table)
library(ggplot2)
wind_dat <- fread('../data/wind_dat.csv', header = F)[, .(datetime = as.POSIXct(V1), wind_speed_ms = V2)]
conc_dat <- fread('../data/conc_dat.csv', header = F)[, .(datetime = as.POSIXct(V1), CH4_conc_ppm = V2)]
dat <- merge.data.table(wind_dat, conc_dat, by = 'datetime', all = T)
dat[, hours := as.numeric(datetime - min(datetime))/60/60]
dat_long <- melt(dat, measure.vars = c('wind_speed_ms','CH4_conc_ppm'))
ggplot(dat_long, aes(datetime, value)) + geom_point(na.rm = T, size = 0.1) + facet_wrap(~variable, scales = 'free')
vol_HS <- 2481 # m3
vol_manure <- 1212 # m3
emis <- 0.067/24 * vol_manure # kg CH4 pr hour, from slurry surface to tank headspace
vent_rate <- 104 # m3/hour
times <- sort(dat$hours)
times <- times[!duplicated(times)]
# start conc in ppm
dat_int <- dat[, .(CH4_conc_ppm = approx(hours, CH4_conc_ppm, xout = hours, rule = 2, method = 'linear')$y,
wind_speed_ms = approx(hours, wind_speed_ms, xout = hours, rule = 2, method = 'linear')$y, time = hours)]
dat_int <- dat_int[!duplicated(dat_int$time)]
makeTimeFunc <- function(dat, x = 1, y = 2, approx_method = 'linear') {
if (is.data.frame(dat)) {
x <- dat[, x]
y <- dat[, y]
func <- approxfun(x, y, method = approx_method, rule = 2)
} else if (is.numeric(dat)) {
func <- function(x) return(dat)
} else {
stop('Input to makeTimeFunc must be numeric or data frame.')
}
return(func)
}
dat_vent <- as.data.frame(dat_int[, .(time = time, vent_norm = ..vent_rate/mean(wind_speed_ms, na.rm = T) * wind_speed_ms)])
vent_fun <- makeTimeFunc(dat_vent)
T = 273.15 + 20
R = 0.082057
y0 <- (dat_int[1, CH4_conc_ppm]/10^6 * 1000)/(R * T) * 16.04/1000# kg CH4/m3 in tank headspace total
pars <- list(vol_HS = vol_HS, vol_manure = vol_manure, emis = emis)
rates <- function(t, y, parms, vent_fun){
vol_HS <- parms$vol_HS # m3
emis <- parms$emis # kg/hour
vent <- vent_fun(t) # m3/hour
derivatives <- c(
y = - (vent * y)/vol_HS + emis/vol_HS # m3/hour * kg/m3 * 1/m3 + kg/hour * 1/m3 = kg/hour/m3 + kg/hour/m3 = kg/hour/m3
)
emission_out <- y * vent # kg/m3 * m3/hour = kg/hour
return(list(derivatives, emission_rate = emission_out))
}
out <- deSolve::lsoda(y = y0, times = times, func = rates, parms = pars, vent_fun = vent_fun)
out <- data.frame(out)
names(out) <- c('hours','CH4_conc_kg_m3','CH4_emis_kg_hour')
plot(out$time, out$CH4_conc_kg_m3)
plot(out$time, out$CH4_conc_kg_m3)
View(out)
plot(out$hours, out$CH4_conc_kg_m3)
plot(out$hours, out$CH4_emis_kg_hour/vol_manure * 24, ylab = 'kg CH4/m3/day')
mean(out$CH4_emis_kg_hour/vol_manure * 24)
plot(out$hours, out$CH4_conc_kg_m3, ylab = 'CH4 HS conc., kg/m3')
kg_m3_ppm <- 1000 * 16.04 * (R * T) / 1000 * 10^6
plot(out$hours, out$CH4_conc_kg_m3 * kg_m3_ppm, ylab = 'CH4 HS conc., ppm')
kg_m3_ppm <- 1000 / 16.04 * (R * T) / 1000 * 10^6
plot(out$hours, out$CH4_conc_kg_m3 * kg_m3_ppm, ylab = 'CH4 HS conc., ppm')
plot(out$hours, out$CH4_conc_kg_m3, ylab = 'CH4 headspace conc., kg/m3')
kg_m3_ppm <- 1000 / 16.04 * (R * T) / 1000 * 10^6
plot(out$hours, out$CH4_conc_kg_m3 * kg_m3_ppm, ylab = 'CH4 headspace conc., ppm')
plot(out$hours, out$CH4_emis_kg_hour/vol_manure * 24, ylab = 'CH4 emis., kg CH4/m3/day')
out$time <- out$hours
merge(out, dat_int)
vol_HS <- 2481 # m3
vol_manure <- 1212 # m3
emis <- 0.067/24 * vol_manure # kg CH4 pr hour, from slurry surface to tank headspace
vent_rate <- 104 # m3/hour
times <- sort(dat$hours)
times <- times[!duplicated(times)]
# start conc in ppm
dat_int <- dat[, .(CH4_conc_ppm = approx(hours, CH4_conc_ppm, xout = hours, rule = 2, method = 'linear')$y,
wind_speed_ms = approx(hours, wind_speed_ms, xout = hours, rule = 2, method = 'linear')$y, time = hours, datetime = datetime)]
dat_int <- dat_int[!duplicated(dat_int$time)]
dat_int <- dat_int[!duplicated(dat_int$time)]
makeTimeFunc <- function(dat, x = 1, y = 2, approx_method = 'linear') {
if (is.data.frame(dat)) {
x <- dat[, x]
y <- dat[, y]
func <- approxfun(x, y, method = approx_method, rule = 2)
} else if (is.numeric(dat)) {
func <- function(x) return(dat)
} else {
stop('Input to makeTimeFunc must be numeric or data frame.')
}
return(func)
}
# here the ventilation rate is scaled with the variation in wind speed.
dat_vent <- as.data.frame(dat_int[, .(time = time, vent_norm = ..vent_rate/mean(wind_speed_ms, na.rm = T) * wind_speed_ms)])
# make a function for interpolating ventilation rate in the ODE call
vent_fun <- makeTimeFunc(dat_vent)
# assume 20 deg C constantly in headspace
T = 273.15 + 20
R = 0.082057
#initial condition of the headspace concentration in kg CH4/m3
y0 <- (dat_int[1, CH4_conc_ppm]/10^6 * 1000)/(R * T) * 16.04/1000# kg CH4/m3 in tank headspace total
#parameters passed to the ODE solver.
pars <- list(vol_HS = vol_HS, emis = emis)
# function that calculates the rate of change of CH4 concentration (derivatives)
rates <- function(t, y, parms, vent_fun){
vol_HS <- parms$vol_HS # m3
emis <- parms$emis # kg/hour
vent <- vent_fun(t) # m3/hour
derivatives <- c(
y = - (vent * y)/vol_HS + emis/vol_HS # m3/hour * kg/m3 * 1/m3 + kg/hour * 1/m3 = kg/hour/m3 + kg/hour/m3 = kg/hour/m3
)
emission_rate <- y * vent # kg/m3 * m3/hour = kg/hour
return(list(derivatives, emission_rate))
}
# Call ODE solver
out <- deSolve::lsoda(y = y0, times = times, func = rates, parms = pars, vent_fun = vent_fun)
out <- data.frame(out)
# fix names in output
names(out) <- c('hours','CH4_conc_kg_m3','CH4_emis_kg_hour')
plot(out$hours, out$CH4_conc_kg_m3, ylab = 'CH4 headspace conc., kg/m3')
kg_m3_ppm <- 1000 / 16.04 * (R * T) / 1000 * 10^6
plot(out$hours, out$CH4_conc_kg_m3 * kg_m3_ppm, ylab = 'CH4 headspace conc., ppm')
plot(out$hours, out$CH4_emis_kg_hour/vol_manure * 24, ylab = 'CH4 emis., kg CH4/m3/day')
mean(out$CH4_emis_kg_hour/vol_manure * 24)
out$time <- out$hours
merge(out, dat_int, by = 'time')
merged <- merge(out, dat_int, by = 'time')
setDT(merged)
merged$hour_of_day <- format(merged$datetime, "%H")
merged$hod <- format(merged$datetime, "%H")
# Categorize into day and night
merged$tod <- ifelse(merged$hod >= "06" & merged$hod < "18", "day", "night")
View(merged)
View(merged)
#calculate grouped mean emission by day/night categorization
merged[, .(CH4_emis_kg_hour = mean(CH4_emis_kg_hour)), by = 'tod']
out$time <- out$hours
merged <- merge(out, dat_int, by = 'time')
setDT(merged)
#hour of the day
merged$hod <- format(merged$datetime, "%H")
# Categorize into day and night
merged$tod <- ifelse(merged$hod >= "06" & merged$hod < "18", "day", "night")
#calculate grouped mean emission by day/night categorization
merged[, .(CH4_emis_kg_hour = mean(CH4_emis_kg_hour)), by = 'tod']
#calculate grouped mean emission by day/night categorization
day_night_emis <- merged[, .(CH4_emis_kg_m3_day = mean(CH4_emis_kg_hour)/vol_manure * 24), by = 'tod']
day_night_emis
mean_emis <- mean(out$CH4_emis_kg_hour/vol_manure * 24)
print(mean_emis)
print(day_night_emis)
0.07705159/mean_emis
0.07705159/mean_emis * 100 - 100
print(paste0('+ ', 0.07705159/mean_emis * 100 - 100))
print(paste0('+ ', round(0.07705159/mean_emis * 100 - 100, 2), ' %'))
print(paste0('+ ', round(0.07705159/mean_emis * 100 - 100, 2), '%'))
vol_HS <- 2481 # m3
vol_manure <- 1212 # m3
emis <- 0.067/24 * vol_manure # kg CH4 pr hour, from slurry surface to tank headspace
vent_rate <- 104 # m3/hour
times <- sort(dat$hours)
times <- times[!duplicated(times)]
# start conc in ppm
dat_int <- dat[
, .(CH4_conc_ppm = approx(hours, CH4_conc_ppm, xout = hours, rule = 2, method = 'linear')$y,
wind_speed_ms = approx(hours, wind_speed_ms, xout = hours, rule = 2, method = 'linear')$y,
time = hours, datetime = datetime)]
dat_int <- dat_int[!duplicated(dat_int$time)]
makeTimeFunc <- function(dat, x = 1, y = 2, approx_method = 'linear') {
if (is.data.frame(dat)) {
x <- dat[, x]
y <- dat[, y]
func <- approxfun(x, y, method = approx_method, rule = 2)
} else if (is.numeric(dat)) {
func <- function(x) return(dat)
} else {
stop('Input to makeTimeFunc must be numeric or data frame.')
}
return(func)
}
# here the ventilation rate is scaled with the variation in wind speed.
dat_vent <- as.data.frame(dat_int[
, .(time = time, vent_norm = ..vent_rate/mean(wind_speed_ms, na.rm = T) * wind_speed_ms)])
# make a function for interpolating ventilation rate in the ODE call
vent_fun <- makeTimeFunc(dat_vent)
# assume 20 deg C constantly in headspace
T = 273.15 + 20
R = 0.082057
#initial condition of the headspace concentration in kg CH4/m3
y0 <- (dat_int[1, CH4_conc_ppm]/10^6 * 1000)/(R * T) * 16.04/1000# kg CH4/m3 in tank headspace total
#parameters passed to the ODE solver.
pars <- list(vol_HS = vol_HS, emis = emis)
# function that calculates the rate of change of CH4 concentration (derivatives)
rates <- function(t, y, parms, vent_fun){
vol_HS <- parms$vol_HS # m3
emis <- parms$emis # kg/hour
vent <- vent_fun(t) # m3/hour
derivatives <- c(
# m3/hour * kg/m3 * 1/m3 + kg/hour * 1/m3 = kg/hour/m3 + kg/hour/m3 = kg/hour/m3
y = - (vent * y)/vol_HS + emis/vol_HS
)
emission_rate <- y * vent # kg/m3 * m3/hour = kg/hour
return(list(derivatives, emission_rate))
}
# Call ODE solver
out <- deSolve::lsoda(y = y0, times = times, func = rates, parms = pars, vent_fun = vent_fun)
out <- data.frame(out)
# fix names in output
names(out) <- c('hours','CH4_conc_kg_m3','CH4_emis_kg_hour')
load("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/ABM_parm/data/demo_data.RData")
install.packages('devtools')
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = TRUE)
temp <- rnorm(1000, 20, sd = 1)
hist(temp)
temp <- rnorm(100000, 20, sd = 1)
hist(temp)
hist(temp, bins = 100)
hist(temp, breaks = 100)
temp_sample <- sample(temp, 10000, replace = T)
pred = 0.52 * temp_sample
hist(pred, breaks = 100)
evap = 0.52 * temp_sample
hist(evap, breaks = 100)
quantile(evap, probs = seq(0, 1, 0.25))
quantile(evap, probs = seq(0.025, 1, 0.25))
quantile(evap, probs = seq(0.025, 0.975))
quantile(evap, probs = seq(0.025, 1, 0.025))
quantile(evap, probs = seq(0.025, 0.025))
?quantile
quantile(evap, probs = seq(0.025, 0.25))
quantile(evap, probs = seq(0.025, 10, 0.25))
quantile(evap, probs = seq(0.025, 1, 0.25))
quantile(evap, probs = seq(0, 1, 0.025))
parameter <- rnorm(100, 52, sd = 4)
parameter <- rnorm(20, 52, sd = 4)
parameter <- rnorm(20, 52, sd = 4)
parameter <- rnorm(20, 52, sd = 4)
hist(parameter, breaks = 10)
fitted_parameter <- rnorm(20, 52, sd = 4)
hist(fitted_parameter, breaks = 10)
fitted_parameter <- rnorm(20, 0.52, sd = 0.04)
hist(fitted_parameter, breaks = 10)
fitted_parameter <- rnorm(20, 0.52, sd = 0.04)
hist(fitted_parameter, breaks = 5)
fitted_parameter <- rnorm(20, 0.52, sd = 0.04)
hist(fitted_parameter, breaks = 8)
library(boot)
??boot
mean_fun <- function(data, indices) colMeans(data[indices,])
repeats = 10000
boot_obj <- boot(fitted_parameter, statistic = mean_fun, R = repeats)
mean_fun <- function(data, indices) colMeans(data[indices])
repeats = 10000
boot_obj <- boot(fitted_parameter, statistic = mean_fun, R = repeats)
fitted_parameter
dat <- as.data.frame(fitted_parameter)
boot_obj <- boot(dat, statistic = mean_fun, R = repeats)
dat[indices,]
mean_fun <- function(data, indices) colMeans(data[indices,])
dat <- as.data.frame(fitted_parameter)
dat
boot_obj <- boot(dat, statistic = mean_fun, R = repeats)
dat <- as.array(fitted_parameter)
boot_obj <- boot(dat, statistic = mean_fun, R = repeats)
dat <- fitted_parameter
repeats = 10000
sample(dat, 20, replace = T)
out <- replicate(10000, sample(dat, 20, replace = T))
out <- NULL
for(i in 1:10000){
out1 <- sample(dat, 20, replace = T)
out1 <- mean(out1)
rbind(out, out1)
}
out <- NULL
for(i in 1:10000){
out1 <- sample(dat, 20, replace = T)
out1 <- mean(out1)
out <- rbind(out, out1)
}
hist(out)
ggplot(GDout_tb, aes(time, mCH4_C_mean, col = temp)) + geom_line() + geom_point() +
geom_errorbar(aes(ymin = mCH4_C_mean - mCH4_C_sd, ymax = mCH4_C_mean + mCH4_C_sd, x = time)) +
facet_grid(comp~gas) +
labs(y = expression('Emission rate (g C kg'^{-1}~VS~'d'^{-1}*')'), x = 'Time (d)', col  = expression('Temp (\u00b0C)'), tag = 'b') +
coord_cartesian(ylim = c(0,70)) +
theme_bw() + theme(legend.position = '', axis.title.y = element_text(size = 10)) + scale_color_manual(values = c("blue", "red"))
rm(list=ls())
library(biogas)
library(readxl)
rho_CH4 <- 0.702 # 0 deg C, 1 ATM, kg/m3
rho_CO2 <- 1.802 # 0 deg C, 1 ATM, kg/m3
C_CH4 <- 12.0107/16.042
C_CO2 <- 12.0107/44.009
dat_biogas <- data.frame(read_excel("../data/dat_resp.xlsx", sheet = "info")) %>%
filter(day >= 283) %>% select(reactor, gas, temp, day, bio_wet_weight, GD_weight_before, GD_weight_after, mass_vented, vol_vented, room_temp, temp_HS, p_amb) %>%
mutate(time = day - 283) %>% select(-day)
library(dplyr)
rm(list=ls())
library(biogas)
library(readxl)
library(dplyr)
rho_CH4 <- 0.702 # 0 deg C, 1 ATM, kg/m3
rho_CO2 <- 1.802 # 0 deg C, 1 ATM, kg/m3
C_CH4 <- 12.0107/16.042
C_CO2 <- 12.0107/44.009
dat_biogas <- data.frame(read_excel("../data/dat_resp.xlsx", sheet = "info")) %>%
filter(day >= 283) %>% select(reactor, gas, temp, day, bio_wet_weight, GD_weight_before, GD_weight_after, mass_vented, vol_vented, room_temp, temp_HS, p_amb) %>%
mutate(time = day - 283) %>% select(-day)
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/AU-BCE-EE/Dalby-2024-SurfResp-Paper/scripts")
rm(list=ls())
library(biogas)
library(readxl)
library(dplyr)
rho_CH4 <- 0.702 # 0 deg C, 1 ATM, kg/m3
rho_CO2 <- 1.802 # 0 deg C, 1 ATM, kg/m3
C_CH4 <- 12.0107/16.042
C_CO2 <- 12.0107/44.009
dat_biogas <- data.frame(read_excel("../data/dat_resp.xlsx", sheet = "info")) %>%
filter(day >= 283) %>% select(reactor, gas, temp, day, bio_wet_weight, GD_weight_before, GD_weight_after, mass_vented, vol_vented, room_temp, temp_HS, p_amb) %>%
mutate(time = day - 283) %>% select(-day)
dat <- as.data.frame(dat_biogas)
GDout <- calcBgGD(dat, temp.vol = 22, temp.grav = 34, pres.vol = 'p_amb', pres.grav = 1500,
id.name = 'reactor', vol.name = 'vol_vented', m.pre.name = 'GD_weight_after', m.post.name = 'GD_weight_after',
time.name = 'time', comp.name = 'xCH4.GD',
vented.mass = FALSE, averaging = 'final', vmethod = 'vol',
extrap = TRUE,
addt0 = TRUE, showt0 = TRUE, comp.sub = 'lim',
unit.pres = 'mbar')
GDout$mCH4_C <- GDout$vCH4 * rho_CH4 * C_CH4
GDout$mCO2_C <- (GDout$vBg - GDout$vCH4) * rho_CO2 * C_CO2
GDout$mCH4_C_cum <- GDout$cvCH4 * rho_CH4 * C_CH4
GDout$mCO2_C_cum <- (GDout$cvBg - GDout$cvCH4) * rho_CO2 * C_CO2
GDout_tb <- GDout %>% group_by(gas, temp, time) %>%
summarize(across(c(mCH4_C, mCO2_C, mCH4_C_cum, mCO2_C_cum), .fns = list(mean = mean, sd = sd))) %>%
filter(gas != 0)
GDout_tb$comp <- 'CH4'
new.lab = as_labeller(c(air = 'Air', n2 = 'N[2]', CH4 = 'CH[4]'), label_parsed)
library(tidyr)
rm(list=ls())
library(biogas)
library(readxl)
library(dplyr)
library(tidyr)
rho_CH4 <- 0.702 # 0 deg C, 1 ATM, kg/m3
rho_CO2 <- 1.802 # 0 deg C, 1 ATM, kg/m3
C_CH4 <- 12.0107/16.042
C_CO2 <- 12.0107/44.009
dat_biogas <- data.frame(read_excel("../data/dat_resp.xlsx", sheet = "info")) %>%
filter(day >= 283) %>% select(reactor, gas, temp, day, bio_wet_weight, GD_weight_before, GD_weight_after, mass_vented, vol_vented, room_temp, temp_HS, p_amb) %>%
mutate(time = day - 283) %>% select(-day)
dat <- as.data.frame(dat_biogas)
GDout <- calcBgGD(dat, temp.vol = 22, temp.grav = 34, pres.vol = 'p_amb', pres.grav = 1500,
id.name = 'reactor', vol.name = 'vol_vented', m.pre.name = 'GD_weight_after', m.post.name = 'GD_weight_after',
time.name = 'time', comp.name = 'xCH4.GD',
vented.mass = FALSE, averaging = 'final', vmethod = 'vol',
extrap = TRUE,
addt0 = TRUE, showt0 = TRUE, comp.sub = 'lim',
unit.pres = 'mbar')
GDout$mCH4_C <- GDout$vCH4 * rho_CH4 * C_CH4
GDout$mCO2_C <- (GDout$vBg - GDout$vCH4) * rho_CO2 * C_CO2
GDout$mCH4_C_cum <- GDout$cvCH4 * rho_CH4 * C_CH4
GDout$mCO2_C_cum <- (GDout$cvBg - GDout$cvCH4) * rho_CO2 * C_CO2
GDout_tb <- GDout %>% group_by(gas, temp, time) %>%
summarize(across(c(mCH4_C, mCO2_C, mCH4_C_cum, mCO2_C_cum), .fns = list(mean = mean, sd = sd))) %>%
filter(gas != 0)
GDout_tb$comp <- 'CH4'
new.lab = as_labeller(c(air = 'Air', n2 = 'N[2]', CH4 = 'CH[4]'), label_parsed)
library(ggplot)
rm(list=ls())
library(biogas)
library(readxl)
library(dplyr)
library(ggplot2)
rho_CH4 <- 0.702 # 0 deg C, 1 ATM, kg/m3
rho_CO2 <- 1.802 # 0 deg C, 1 ATM, kg/m3
C_CH4 <- 12.0107/16.042
C_CO2 <- 12.0107/44.009
dat_biogas <- data.frame(read_excel("../data/dat_resp.xlsx", sheet = "info")) %>%
filter(day >= 283) %>% select(reactor, gas, temp, day, bio_wet_weight, GD_weight_before, GD_weight_after, mass_vented, vol_vented, room_temp, temp_HS, p_amb) %>%
mutate(time = day - 283) %>% select(-day)
dat <- as.data.frame(dat_biogas)
GDout <- calcBgGD(dat, temp.vol = 22, temp.grav = 34, pres.vol = 'p_amb', pres.grav = 1500,
id.name = 'reactor', vol.name = 'vol_vented', m.pre.name = 'GD_weight_after', m.post.name = 'GD_weight_after',
time.name = 'time', comp.name = 'xCH4.GD',
vented.mass = FALSE, averaging = 'final', vmethod = 'vol',
extrap = TRUE,
addt0 = TRUE, showt0 = TRUE, comp.sub = 'lim',
unit.pres = 'mbar')
GDout$mCH4_C <- GDout$vCH4 * rho_CH4 * C_CH4
GDout$mCO2_C <- (GDout$vBg - GDout$vCH4) * rho_CO2 * C_CO2
GDout$mCH4_C_cum <- GDout$cvCH4 * rho_CH4 * C_CH4
GDout$mCO2_C_cum <- (GDout$cvBg - GDout$cvCH4) * rho_CO2 * C_CO2
GDout_tb <- GDout %>% group_by(gas, temp, time) %>%
summarize(across(c(mCH4_C, mCO2_C, mCH4_C_cum, mCO2_C_cum), .fns = list(mean = mean, sd = sd))) %>%
filter(gas != 0)
GDout_tb$comp <- 'CH4'
new.lab = as_labeller(c(air = 'Air', n2 = 'N[2]', CH4 = 'CH[4]'), label_parsed)
ggplot(GDout_tb, aes(time, mCH4_C_mean, col = temp)) + geom_line() + geom_point() +
geom_errorbar(aes(ymin = mCH4_C_mean - mCH4_C_sd, ymax = mCH4_C_mean + mCH4_C_sd, x = time)) +
facet_grid(comp~gas) +
labs(y = expression('Emission rate (g C kg'^{-1}~VS~'d'^{-1}*')'), x = 'Time (d)', col  = expression('Temp (\u00b0C)'), tag = 'b') +
coord_cartesian(ylim = c(0,70)) +
theme_bw() + theme(legend.position = '', axis.title.y = element_text(size = 10)) + scale_color_manual(values = c("blue", "red"))
#plot cumulative emission
#png('../figures/fig_emis_ratio_bio.png',  width = 18/2.54, height = 20/2.54, units = 'in', res = 600)
#grid::grid.draw(rbind(ggplotGrob(fig_emis), ggplotGrob(fig_ratio), ggplotGrob(fig_biogas)))
#dev.off()
