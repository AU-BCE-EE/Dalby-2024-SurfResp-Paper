y = - vent * y + emis/vol_HS
)
emission_out <- y * vent # kg/hour
return(list(derivatives, emission_rate = emission_out))
}
out <- deSolve::lsoda(y = y0, times = times, func = rates, parms = pars, vent_fun = vent_fun)
- vent * y
y
emis/vol_HS
out <- data.frame(out)
vol_HS <- 2481 # m3
emis <- 0.067/24 # kgCH4 pr m3 pr hour
vol_manure <- 1212 # m3
vent_rate <- 104 # m3/hour
times <- sort(dat$hours)
times <- times[!duplicated(times)]
# start conc in ppm
dat_int <- dat[, .(CH4_conc_ppm = approx(hours, CH4_conc_ppm, xout = hours, rule = 2, method = 'linear')$y,
wind_speed_ms = approx(hours, wind_speed_ms, xout = hours, rule = 2, method = 'linear')$y, time = hours)]
dat_int <- dat_int[!duplicated(dat_int$time)]
makeTimeFunc <- function(dat, x = 1, y = 2, approx_method = 'linear') {
if (is.data.frame(dat)) {
x <- dat[, x]
y <- dat[, y]
func <- approxfun(x, y, method = approx_method, rule = 2)
} else if (is.numeric(dat)) {
func <- function(x) return(dat)
} else {
stop('Input to makeTimeFunc must be numeric or data frame.')
}
return(func)
}
dat_vent <- as.data.frame(dat_int[, .(time = time, vent_norm = ..vent_rate/mean(wind_speed_ms, na.rm = T) * wind_speed_ms)])
vent_fun <- makeTimeFunc(dat_vent)
T = 273.15 + 20
R = 0.082057
y0 <- (dat_int[1, CH4_conc_ppm]/10^6 * 1000)/(R * T) * 16.04/1000 # kg/m3
pars <- list(vol_HS = vol_HS, vol_manure = vol_manure, emis = emis)
rates <- function(t, y, parms, vent_fun){
browser()
vol_HS <- parms$vol_HS
emis <- parms$emis * parms$vol_manure # kg CH4/hour
vent <- vent_fun(t) # m3/hour
derivatives <- c(
y = - vent/vol_HS * y + emis/vol_HS
)
emission_out <- y * vent # kg/hour
return(list(derivatives, emission_rate = emission_out))
}
out <- deSolve::lsoda(y = y0, times = times, func = rates, parms = pars, vent_fun = vent_fun)
- vent/vol_HS * y
out <- data.frame(out)
vol_HS <- 2481 # m3
vol_manure <- 1212 # m3
emis <- 0.067/24 * vol_manure # kg CH4 pr hour
vent_rate <- 104 # m3/hour
times <- sort(dat$hours)
times <- times[!duplicated(times)]
# start conc in ppm
dat_int <- dat[, .(CH4_conc_ppm = approx(hours, CH4_conc_ppm, xout = hours, rule = 2, method = 'linear')$y,
wind_speed_ms = approx(hours, wind_speed_ms, xout = hours, rule = 2, method = 'linear')$y, time = hours)]
dat_int <- dat_int[!duplicated(dat_int$time)]
makeTimeFunc <- function(dat, x = 1, y = 2, approx_method = 'linear') {
if (is.data.frame(dat)) {
x <- dat[, x]
y <- dat[, y]
func <- approxfun(x, y, method = approx_method, rule = 2)
} else if (is.numeric(dat)) {
func <- function(x) return(dat)
} else {
stop('Input to makeTimeFunc must be numeric or data frame.')
}
return(func)
}
dat_vent <- as.data.frame(dat_int[, .(time = time, vent_norm = ..vent_rate/mean(wind_speed_ms, na.rm = T) * wind_speed_ms)])
vent_fun <- makeTimeFunc(dat_vent)
T = 273.15 + 20
R = 0.082057
y0 <- (dat_int[1, CH4_conc_ppm]/10^6 * 1000)/(R * T) * 16.04/1000# kg CH4/m3 in tank headspace total
pars <- list(vol_HS = vol_HS, vol_manure = vol_manure, emis = emis)
rates <- function(t, y, parms, vent_fun){
#browser()
vol_HS <- parms$vol_HS
emis <- parms$emis # kg CH4/hour
vent <- vent_fun(t) # m3/hour
derivatives <- c(
y = - (vent * y)/vol_HS + emis/vol_HS #
)
emission_out <- y * vent # kg/hour
return(list(derivatives, emission_rate = emission_out))
}
out <- deSolve::lsoda(y = y0, times = times, func = rates, parms = pars, vent_fun = vent_fun)
out <- data.frame(out)
plot(plot_dat$time, plot_dat$conc_ppm)
plot_dat <- out
plot(out$time, out$X1)
plot(out$time, out$emission_rate)
names(out) <- c('hours','CH4_conc_kg_m3','CH4_emis_kg_hour')
plot(out$time, out$CH4_conc_kg_m3)
plot(out$time, out$CH4_emis_kg_hour/vol_manure * 24, ylab = 'kg CH4/m3/day')
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(data.table)
library(ggplot2)
wind_dat <- fread('../data/wind_dat.csv', header = F)[, .(datetime = as.POSIXct(V1), wind_speed_ms = V2)]
conc_dat <- fread('../data/conc_dat.csv', header = F)[, .(datetime = as.POSIXct(V1), CH4_conc_ppm = V2)]
dat <- merge.data.table(wind_dat, conc_dat, by = 'datetime', all = T)
dat[, hours := as.numeric(datetime - min(datetime))/60/60]
dat_long <- melt(dat, measure.vars = c('wind_speed_ms','CH4_conc_ppm'))
ggplot(dat_long, aes(datetime, value)) + geom_point(na.rm = T, size = 0.1) + facet_wrap(~variable, scales = 'free')
vol_HS <- 2481 # m3
vol_manure <- 1212 # m3
emis <- 0.067/24 * vol_manure # kg CH4 pr hour, from slurry surface to tank headspace
vent_rate <- 104 # m3/hour
times <- sort(dat$hours)
times <- times[!duplicated(times)]
# start conc in ppm
dat_int <- dat[, .(CH4_conc_ppm = approx(hours, CH4_conc_ppm, xout = hours, rule = 2, method = 'linear')$y,
wind_speed_ms = approx(hours, wind_speed_ms, xout = hours, rule = 2, method = 'linear')$y, time = hours)]
dat_int <- dat_int[!duplicated(dat_int$time)]
makeTimeFunc <- function(dat, x = 1, y = 2, approx_method = 'linear') {
if (is.data.frame(dat)) {
x <- dat[, x]
y <- dat[, y]
func <- approxfun(x, y, method = approx_method, rule = 2)
} else if (is.numeric(dat)) {
func <- function(x) return(dat)
} else {
stop('Input to makeTimeFunc must be numeric or data frame.')
}
return(func)
}
dat_vent <- as.data.frame(dat_int[, .(time = time, vent_norm = ..vent_rate/mean(wind_speed_ms, na.rm = T) * wind_speed_ms)])
vent_fun <- makeTimeFunc(dat_vent)
T = 273.15 + 20
R = 0.082057
y0 <- (dat_int[1, CH4_conc_ppm]/10^6 * 1000)/(R * T) * 16.04/1000# kg CH4/m3 in tank headspace total
pars <- list(vol_HS = vol_HS, vol_manure = vol_manure, emis = emis)
rates <- function(t, y, parms, vent_fun){
vol_HS <- parms$vol_HS # m3
emis <- parms$emis # kg/hour
vent <- vent_fun(t) # m3/hour
derivatives <- c(
y = - (vent * y)/vol_HS + emis/vol_HS # m3/hour * kg/m3 * 1/m3 + kg/hour * 1/m3 = kg/hour/m3 + kg/hour/m3 = kg/hour/m3
)
emission_out <- y * vent # kg/m3 * m3/hour = kg/hour
return(list(derivatives, emission_rate = emission_out))
}
out <- deSolve::lsoda(y = y0, times = times, func = rates, parms = pars, vent_fun = vent_fun)
out <- data.frame(out)
names(out) <- c('hours','CH4_conc_kg_m3','CH4_emis_kg_hour')
plot(out$time, out$CH4_conc_kg_m3)
plot(out$time, out$CH4_conc_kg_m3)
View(out)
plot(out$hours, out$CH4_conc_kg_m3)
plot(out$hours, out$CH4_emis_kg_hour/vol_manure * 24, ylab = 'kg CH4/m3/day')
mean(out$CH4_emis_kg_hour/vol_manure * 24)
plot(out$hours, out$CH4_conc_kg_m3, ylab = 'CH4 HS conc., kg/m3')
kg_m3_ppm <- 1000 * 16.04 * (R * T) / 1000 * 10^6
plot(out$hours, out$CH4_conc_kg_m3 * kg_m3_ppm, ylab = 'CH4 HS conc., ppm')
kg_m3_ppm <- 1000 / 16.04 * (R * T) / 1000 * 10^6
plot(out$hours, out$CH4_conc_kg_m3 * kg_m3_ppm, ylab = 'CH4 HS conc., ppm')
plot(out$hours, out$CH4_conc_kg_m3, ylab = 'CH4 headspace conc., kg/m3')
kg_m3_ppm <- 1000 / 16.04 * (R * T) / 1000 * 10^6
plot(out$hours, out$CH4_conc_kg_m3 * kg_m3_ppm, ylab = 'CH4 headspace conc., ppm')
plot(out$hours, out$CH4_emis_kg_hour/vol_manure * 24, ylab = 'CH4 emis., kg CH4/m3/day')
out$time <- out$hours
merge(out, dat_int)
vol_HS <- 2481 # m3
vol_manure <- 1212 # m3
emis <- 0.067/24 * vol_manure # kg CH4 pr hour, from slurry surface to tank headspace
vent_rate <- 104 # m3/hour
times <- sort(dat$hours)
times <- times[!duplicated(times)]
# start conc in ppm
dat_int <- dat[, .(CH4_conc_ppm = approx(hours, CH4_conc_ppm, xout = hours, rule = 2, method = 'linear')$y,
wind_speed_ms = approx(hours, wind_speed_ms, xout = hours, rule = 2, method = 'linear')$y, time = hours, datetime = datetime)]
dat_int <- dat_int[!duplicated(dat_int$time)]
dat_int <- dat_int[!duplicated(dat_int$time)]
makeTimeFunc <- function(dat, x = 1, y = 2, approx_method = 'linear') {
if (is.data.frame(dat)) {
x <- dat[, x]
y <- dat[, y]
func <- approxfun(x, y, method = approx_method, rule = 2)
} else if (is.numeric(dat)) {
func <- function(x) return(dat)
} else {
stop('Input to makeTimeFunc must be numeric or data frame.')
}
return(func)
}
# here the ventilation rate is scaled with the variation in wind speed.
dat_vent <- as.data.frame(dat_int[, .(time = time, vent_norm = ..vent_rate/mean(wind_speed_ms, na.rm = T) * wind_speed_ms)])
# make a function for interpolating ventilation rate in the ODE call
vent_fun <- makeTimeFunc(dat_vent)
# assume 20 deg C constantly in headspace
T = 273.15 + 20
R = 0.082057
#initial condition of the headspace concentration in kg CH4/m3
y0 <- (dat_int[1, CH4_conc_ppm]/10^6 * 1000)/(R * T) * 16.04/1000# kg CH4/m3 in tank headspace total
#parameters passed to the ODE solver.
pars <- list(vol_HS = vol_HS, emis = emis)
# function that calculates the rate of change of CH4 concentration (derivatives)
rates <- function(t, y, parms, vent_fun){
vol_HS <- parms$vol_HS # m3
emis <- parms$emis # kg/hour
vent <- vent_fun(t) # m3/hour
derivatives <- c(
y = - (vent * y)/vol_HS + emis/vol_HS # m3/hour * kg/m3 * 1/m3 + kg/hour * 1/m3 = kg/hour/m3 + kg/hour/m3 = kg/hour/m3
)
emission_rate <- y * vent # kg/m3 * m3/hour = kg/hour
return(list(derivatives, emission_rate))
}
# Call ODE solver
out <- deSolve::lsoda(y = y0, times = times, func = rates, parms = pars, vent_fun = vent_fun)
out <- data.frame(out)
# fix names in output
names(out) <- c('hours','CH4_conc_kg_m3','CH4_emis_kg_hour')
plot(out$hours, out$CH4_conc_kg_m3, ylab = 'CH4 headspace conc., kg/m3')
kg_m3_ppm <- 1000 / 16.04 * (R * T) / 1000 * 10^6
plot(out$hours, out$CH4_conc_kg_m3 * kg_m3_ppm, ylab = 'CH4 headspace conc., ppm')
plot(out$hours, out$CH4_emis_kg_hour/vol_manure * 24, ylab = 'CH4 emis., kg CH4/m3/day')
mean(out$CH4_emis_kg_hour/vol_manure * 24)
out$time <- out$hours
merge(out, dat_int, by = 'time')
merged <- merge(out, dat_int, by = 'time')
setDT(merged)
merged$hour_of_day <- format(merged$datetime, "%H")
merged$hod <- format(merged$datetime, "%H")
# Categorize into day and night
merged$tod <- ifelse(merged$hod >= "06" & merged$hod < "18", "day", "night")
View(merged)
View(merged)
#calculate grouped mean emission by day/night categorization
merged[, .(CH4_emis_kg_hour = mean(CH4_emis_kg_hour)), by = 'tod']
out$time <- out$hours
merged <- merge(out, dat_int, by = 'time')
setDT(merged)
#hour of the day
merged$hod <- format(merged$datetime, "%H")
# Categorize into day and night
merged$tod <- ifelse(merged$hod >= "06" & merged$hod < "18", "day", "night")
#calculate grouped mean emission by day/night categorization
merged[, .(CH4_emis_kg_hour = mean(CH4_emis_kg_hour)), by = 'tod']
#calculate grouped mean emission by day/night categorization
day_night_emis <- merged[, .(CH4_emis_kg_m3_day = mean(CH4_emis_kg_hour)/vol_manure * 24), by = 'tod']
day_night_emis
mean_emis <- mean(out$CH4_emis_kg_hour/vol_manure * 24)
print(mean_emis)
print(day_night_emis)
0.07705159/mean_emis
0.07705159/mean_emis * 100 - 100
print(paste0('+ ', 0.07705159/mean_emis * 100 - 100))
print(paste0('+ ', round(0.07705159/mean_emis * 100 - 100, 2), ' %'))
print(paste0('+ ', round(0.07705159/mean_emis * 100 - 100, 2), '%'))
vol_HS <- 2481 # m3
vol_manure <- 1212 # m3
emis <- 0.067/24 * vol_manure # kg CH4 pr hour, from slurry surface to tank headspace
vent_rate <- 104 # m3/hour
times <- sort(dat$hours)
times <- times[!duplicated(times)]
# start conc in ppm
dat_int <- dat[
, .(CH4_conc_ppm = approx(hours, CH4_conc_ppm, xout = hours, rule = 2, method = 'linear')$y,
wind_speed_ms = approx(hours, wind_speed_ms, xout = hours, rule = 2, method = 'linear')$y,
time = hours, datetime = datetime)]
dat_int <- dat_int[!duplicated(dat_int$time)]
makeTimeFunc <- function(dat, x = 1, y = 2, approx_method = 'linear') {
if (is.data.frame(dat)) {
x <- dat[, x]
y <- dat[, y]
func <- approxfun(x, y, method = approx_method, rule = 2)
} else if (is.numeric(dat)) {
func <- function(x) return(dat)
} else {
stop('Input to makeTimeFunc must be numeric or data frame.')
}
return(func)
}
# here the ventilation rate is scaled with the variation in wind speed.
dat_vent <- as.data.frame(dat_int[
, .(time = time, vent_norm = ..vent_rate/mean(wind_speed_ms, na.rm = T) * wind_speed_ms)])
# make a function for interpolating ventilation rate in the ODE call
vent_fun <- makeTimeFunc(dat_vent)
# assume 20 deg C constantly in headspace
T = 273.15 + 20
R = 0.082057
#initial condition of the headspace concentration in kg CH4/m3
y0 <- (dat_int[1, CH4_conc_ppm]/10^6 * 1000)/(R * T) * 16.04/1000# kg CH4/m3 in tank headspace total
#parameters passed to the ODE solver.
pars <- list(vol_HS = vol_HS, emis = emis)
# function that calculates the rate of change of CH4 concentration (derivatives)
rates <- function(t, y, parms, vent_fun){
vol_HS <- parms$vol_HS # m3
emis <- parms$emis # kg/hour
vent <- vent_fun(t) # m3/hour
derivatives <- c(
# m3/hour * kg/m3 * 1/m3 + kg/hour * 1/m3 = kg/hour/m3 + kg/hour/m3 = kg/hour/m3
y = - (vent * y)/vol_HS + emis/vol_HS
)
emission_rate <- y * vent # kg/m3 * m3/hour = kg/hour
return(list(derivatives, emission_rate))
}
# Call ODE solver
out <- deSolve::lsoda(y = y0, times = times, func = rates, parms = pars, vent_fun = vent_fun)
out <- data.frame(out)
# fix names in output
names(out) <- c('hours','CH4_conc_kg_m3','CH4_emis_kg_hour')
load("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/ABM_parm/data/demo_data.RData")
install.packages('devtools')
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = TRUE)
temp <- rnorm(1000, 20, sd = 1)
hist(temp)
temp <- rnorm(100000, 20, sd = 1)
hist(temp)
hist(temp, bins = 100)
hist(temp, breaks = 100)
temp_sample <- sample(temp, 10000, replace = T)
pred = 0.52 * temp_sample
hist(pred, breaks = 100)
evap = 0.52 * temp_sample
hist(evap, breaks = 100)
quantile(evap, probs = seq(0, 1, 0.25))
quantile(evap, probs = seq(0.025, 1, 0.25))
quantile(evap, probs = seq(0.025, 0.975))
quantile(evap, probs = seq(0.025, 1, 0.025))
quantile(evap, probs = seq(0.025, 0.025))
?quantile
quantile(evap, probs = seq(0.025, 0.25))
quantile(evap, probs = seq(0.025, 10, 0.25))
quantile(evap, probs = seq(0.025, 1, 0.25))
quantile(evap, probs = seq(0, 1, 0.025))
parameter <- rnorm(100, 52, sd = 4)
parameter <- rnorm(20, 52, sd = 4)
parameter <- rnorm(20, 52, sd = 4)
parameter <- rnorm(20, 52, sd = 4)
hist(parameter, breaks = 10)
fitted_parameter <- rnorm(20, 52, sd = 4)
hist(fitted_parameter, breaks = 10)
fitted_parameter <- rnorm(20, 0.52, sd = 0.04)
hist(fitted_parameter, breaks = 10)
fitted_parameter <- rnorm(20, 0.52, sd = 0.04)
hist(fitted_parameter, breaks = 5)
fitted_parameter <- rnorm(20, 0.52, sd = 0.04)
hist(fitted_parameter, breaks = 8)
library(boot)
??boot
mean_fun <- function(data, indices) colMeans(data[indices,])
repeats = 10000
boot_obj <- boot(fitted_parameter, statistic = mean_fun, R = repeats)
mean_fun <- function(data, indices) colMeans(data[indices])
repeats = 10000
boot_obj <- boot(fitted_parameter, statistic = mean_fun, R = repeats)
fitted_parameter
dat <- as.data.frame(fitted_parameter)
boot_obj <- boot(dat, statistic = mean_fun, R = repeats)
dat[indices,]
mean_fun <- function(data, indices) colMeans(data[indices,])
dat <- as.data.frame(fitted_parameter)
dat
boot_obj <- boot(dat, statistic = mean_fun, R = repeats)
dat <- as.array(fitted_parameter)
boot_obj <- boot(dat, statistic = mean_fun, R = repeats)
dat <- fitted_parameter
repeats = 10000
sample(dat, 20, replace = T)
out <- replicate(10000, sample(dat, 20, replace = T))
out <- NULL
for(i in 1:10000){
out1 <- sample(dat, 20, replace = T)
out1 <- mean(out1)
rbind(out, out1)
}
out <- NULL
for(i in 1:10000){
out1 <- sample(dat, 20, replace = T)
out1 <- mean(out1)
out <- rbind(out, out1)
}
hist(out)
rm(list = ls())
library(dplyr)
library(tidyr)
library(ggplot2)
library(marelac)
library(ReacTran)
library(readxl)
library(viridis)
source('pde_fun.R')
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/AU-BCE-EE/Dalby-2024-SurfResp-Paper/scripts")
rm(list = ls())
library(dplyr)
library(tidyr)
library(ggplot2)
library(marelac)
library(ReacTran)
library(readxl)
library(viridis)
source('pde_fun.R')
dat <- read_excel('../data/O2_profiles_corr.xlsx')
optim_pars <- read.csv('../output/optim_pars.csv')
pars <- cbind(optim_pars, D = 2.2 * 10^-5, kH = 0.0013/1000*10^6)
input_dat <- dat %>% mutate(id = as.factor(id)) %>% filter(exclude == 0, depth < 1000)
plot_dat <- data.frame()
for(i in unique(input_dat$id)){
parms <- pars[pars$id == i,]
dat <- input_dat[input_dat$id == i,] %>% select(-manure, -exclude, -mV) %>% filter(umol > 0) %>%
mutate(r = parms$r, KO2 = parms$KO2, type = "data", flux = pars$D[pars$id == i] * max(abs(diff(umol/1000))/abs(diff(depth/10000))))
x <- max(dat$depth)
model1 <- cbind(pde_fun(parms = parms, x = x), id = i, type = "model", man_name = dat$man_name[1], time = dat$time[1], r = parms$r[1], KO2 = parms$KO2[1]) %>%
rename('umol' = 'O2')
plot_dat <- rbind(plot_dat, model1, dat)
}
plot_dat <- plot_dat[!grepl('Cattle', plot_dat$man_name),]
fig_profiles <- ggplot(plot_dat, aes(umol, y = depth, group = id, col = time)) +
geom_path(data = subset(plot_dat, type == "data")) +  # Add points for "data" category
scale_y_continuous(trans = "reverse") +
scale_x_continuous(position = "top") +
labs(y = "Depth (µm)", x = expression("Oxygen concentration (µmol"~L^{-1}*")"),
col = "Time since mixing (d)") +
facet_wrap(~man_name) +
scale_color_viridis(option = "D")  +
theme_bw()
fig_profiles
fig_profiles + theme(panel.spacing = unit(2, "lines"))
fig_profiles + theme(panel.spacing = unit(0.1, "lines"))
fig_profiles + theme(panel.spacing = unit(0.2, "lines"))
format_labels <- function(x) {
# Identify the first and last label positions
first <- x[1]
last <- x[length(x)]
# Format the labels
formatted_labels <- sapply(x, function(value) {
# Check if the value is the first or last
if (value == first || value == last) {
# Round to desired number of decimals for first and last labels
return(formatC(value, format = "f", digits = 1))
} else {
# Leave other labels unchanged
return(value)
}
})
return(formatted_labels)
}
# Apply the custom formatting function using scale_x_continuous
p <- fig_profiles + scale_x_continuous(labels = format_labels)
p
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/AU-BCE-EE/Dalby-2024-SurfResp-Paper/scripts")
rm(list = ls())
library("readxl")
library('ggplot2')
library('tidyr')
library('dplyr')
library('gridExtra')
#prep
dat.org <- data.frame(read_excel("../data/dat_resp.xlsx", sheet = "all"))
dat.info <- data.frame(read_excel("../data/dat_resp.xlsx", sheet = "info"))
dat.info.f <- dat.info %>% select(c('reactor', 'temp','gas','datetime','day', 'wet_weight', 'dm','vs','lig','cel','hem','lip','tan','tn','vfa','pH')) %>%
mutate(dm = dm * 10, vs = vs * dm)
mass <- dat.info.f$wet_weight[dat.info.f$day == 0]/1000 # kg
mass <- mass[!is.na(mass)]
dat.org <- dat.org[dat.org$reactor != 'bg',]
dat.org$mass <- mass
CO2_bg <- 430
CH4_bg <- 2
dCO2_bg <- -8
dCH4_bg <- -47.2
ifelse(dat.org$gas == "air", dat.org$CO2_emis <- (as.numeric(dat.org$co2) - CO2_bg) , dat.org$CO2_emis <- dat.org$co2)
ifelse(dat.org$gas == "air", dat.org$CH4_emis <- (as.numeric(dat.org$ch4) - CH4_bg) , dat.org$CH4_emis <- dat.org$ch4)
dat.mod <- dat.org %>% mutate(delta_ch4_corr = (delta_ch4 * (CH4_emis + CH4_bg) -  (dCH4_bg * CH4_bg))/CH4_emis,
delta_co2_corr =  (delta_co2 * (CO2_emis + CO2_bg) -  (dCO2_bg * CO2_bg))/CO2_emis) %>% group_by(temp, gas, day, date) %>%
summarise(across(c('delta_ch4','delta_co2'), .fns = list(mean = mean, sd = sd), na.rm = TRUE))
dat.mod.long <- dat.mod %>%
pivot_longer(cols = c('delta_ch4_mean', 'delta_co2_mean', 'delta_ch4_sd', 'delta_co2_sd'), names_to = 'comp', values_to = 'value')
dat.mod.mean <- dat.mod.long[grepl('mean$', dat.mod.long$comp),]
dat.mod.sd <- dat.mod.long[grepl('sd$', dat.mod.long$comp),]
dat.mod.both <- cbind(dat.mod.mean, sd = dat.mod.sd$value)
dat.mod.both$temp <- as.factor(dat.mod.both$temp)
dat.mod.both <- dat.mod.both %>% mutate(group = ifelse(gas == 'n2' & temp == 10, "10 \u00b0C, N2",
ifelse(gas == 'n2' & temp == 20, "20 \u00b0C, N2",
ifelse(gas == 'air' & temp == 10, "10 \u00b0C, Air", "20 \u00b0C, Air"))))
dat.mod.both$group <- as.factor(dat.mod.both$group)
# plot emission rates
new.lab <- as_labeller(c(delta_ch4_mean = "CH[4]", delta_co2_mean = "CO[2]"), label_parsed)
fig_delta <- ggplot(dat.mod.both, aes(x = day, y = value, col = group)) +
geom_point() +
geom_errorbar(aes(ymin = value - sd, ymax = value + sd)) +
facet_grid(~comp, labeller = new.lab, scales = "free_y") +
scale_x_continuous(breaks = seq(0, 250, by = 50)) +
theme_bw() +
theme(text = element_text(size = 10)) +
theme(legend.position = 'top') +
labs(y = expression(delta^{13}*'C (\u2030)'), x = "", col = expression('Temp (\u00b0C)'))
fig_Delta
fig_delta
rm(list = ls())
library("readxl")
library('ggplot2')
library('tidyr')
library('dplyr')
dat.org <- data.frame(read_excel("../data/dat_herald.xlsx"))
R <- 0.082057
T <- 298
f_CO2 <- 1/1000000 /(R * T) * 60 * 24 * 1000# mmol/day
f_CH4 <- 1/1000000 /(R * T) * 60 * 24 * 1000 # mmol/day
dat.mod <- dat.org %>% mutate(CO2_emis = (CO2 - 450) * flow * f_CO2, CH4_emis = (CH4 - 2) * flow * f_CH4, ratio = CH4_emis / (CO2_emis + CH4_emis)) %>%
filter(CO2_emis > 0, CH4_emis > 0) %>% group_by(id) %>% summarise(ratio = mean(ratio, na.rm = T), CO2 = mean(CO2, na.rm = T), CH4 = mean(CH4, na.rm = T),
CO2_emis = mean(CO2_emis, na.rm = T), CH4_emis = mean(CH4_emis, na.rm = T))
dat.mod.long <- dat.org %>% mutate(CO2_emis = (CO2 - 450) * flow * f_CO2, CH4_emis = (CH4 - 2) * flow * f_CH4, ratio = CH4_emis / (CO2_emis + CH4_emis)) %>%
filter(CO2_emis > 0, CH4_emis > 0) %>%  pivot_longer(cols = c('CH4_emis', 'CO2_emis', 'ratio'), names_to = 'comp', values_to = 'value') %>% filter(id != 7)
dat.mod.long$id <- as.factor(dat.mod.long$id)
ggplot(dat.mod.long, aes(x = date.time, y = value, col = id)) + geom_point() + facet_wrap(~comp, scales = "free")
